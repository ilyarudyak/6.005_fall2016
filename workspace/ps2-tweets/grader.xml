<project default="all">
  
  <property name="problem.set" value="ps2"/>
  <property name="project.name" value="${problem.set}-tweets"/>
	
  <property name="ant.build.javac.target" value="1.8"/>
  <property name="build.sysclasspath" value="ignore"/>

  <property name="beta.grader.jar" value="${problem.set}-beta-grader.jar"/>
  <property name="final.grader.jar" value="${problem.set}-final-grader.jar"/>

  <property name="grader.dir" value=".grader"/>
  <property name="grader.report.file" value="my-grader-report.xml"/>
  <property name="zipfile" value="my-submission.zip"/>

  <condition property="final.grading">
    <available file="${final.grader.jar}"/>
  </condition>

  <condition property="which.tests.ran" value="BETA + FINAL" else="BETA">
    <isset property="final.grading"/>
  </condition>

  <path id="junit.jars">
    <pathelement location="lib/junit-4.12.jar"/>
    <pathelement location="lib/hamcrest-core-1.3.jar"/>
  </path>

	
  <target name="all" depends="clean, beta, final, report">
    <echo>
Your code has been compiled and run against the ${which.tests.ran} grading tests.
To see the test results, double-click on ${grader.report.file}.
To submit your problem set, upload ${zipfile} to the problem set's submission page in edX.
(If you don't see ${grader.report.file} or ${zipfile} in Eclipse, right-click on ${project.name} and choose Refresh.)
</echo>
  </target>

  <!-- run all beta grading tests -->

  <target name="beta" depends="compile">
    <echo>Running the tests we gave you with the problem set on your implementation</echo>
    <junit tempdir="${grader.dir}" fork="yes" timeout="8000">
      <jvmarg value="-Ddidit.desc=Running the tests we gave you with the problem set on your implementation."/>
      <formatter type="xml" usefile="true"/>
      <batchtest todir="${grader.dir}">
        <fileset dir="${grader.dir}/bin-tests-beta" includes="twitter/staff/Original*Test.class"/>
      </batchtest>
      <classpath>
        <path refid="junit.jars"/>
        <pathelement location="${grader.dir}/bin-tests-beta"/>
        <pathelement location="${grader.dir}/bin-impls-student"/>
      </classpath>
      <assertions>
        <enable/>
      </assertions>
    </junit>
    
    <echo>Running your tests on your implementation</echo>
    <junit tempdir="${grader.dir}" fork="yes" timeout="8000">
      <jvmarg value="-Ddidit.desc=Running your tests on your implementation."/>
      <formatter type="xml" usefile="true"/>
      <batchtest todir="${grader.dir}">
        <fileset dir="${grader.dir}/bin-tests-student" includes="twitter/*Test.class"/>
      </batchtest>
      <classpath>
        <path refid="junit.jars"/>
        <pathelement location="${grader.dir}/bin-tests-student"/>
        <pathelement location="${grader.dir}/bin-impls-student"/>
      </classpath>
      <assertions>
        <enable/>
      </assertions>
    </junit>
    
    <echo>Running your tests against a broken staff implementation.
    Succeeds when at least one of your tests fails, since this implementation has bugs.</echo>
    <junit tempdir="${grader.dir}" fork="yes" timeout="8000">
      <jvmarg value="-Ddidit.desc=Running your tests against a broken staff implementation. Succeeds when at least one of your tests fails, since this implementation has bugs."/>
      <formatter type="xml" usefile="true"/>
      <batchtest todir="${grader.dir}">
        <fileset dir="${grader.dir}/bin-impls-staff" includes="twitter/staff/*TestRunner.class"/>
      </batchtest>
      <classpath>
        <path refid="junit.jars"/>
        <pathelement location="${grader.dir}/bin-impls-empty"/>
        <pathelement location="${grader.dir}/bin-impls-staff"/>
        <pathelement location="${grader.dir}/bin-tests-student"/>
      </classpath>
      <assertions>
        <enable/>
      </assertions>
    </junit>
  </target>
  
  <!-- run all final grading tests -->

  <target name="final" depends="compile, compile-final" if="${final.grading}">
    <echo>Running our tests against your implementation</echo>
    <junit tempdir="${grader.dir}" fork="yes" timeout="40000">
      <jvmarg value="-Ddidit.desc=Running our tests against your implementation"/>
      <formatter type="xml" usefile="true"/>
      <batchtest todir="${grader.dir}">
        <fileset dir="${grader.dir}/bin-tests-final" includes="twitter/staff/Grading*Test.class"/>
      </batchtest>
      <classpath>
        <path refid="junit.jars"/>
        <pathelement location="${grader.dir}/bin-tests-final"/>
        <pathelement location="${grader.dir}/bin-impls-student"/>
      </classpath>
      <assertions>
        <enable/>
      </assertions>
    </junit>
    
    <echo>Running your tests against our good and bad implementations</echo>
    <junit tempdir="${grader.dir}" fork="yes" timeout="40000">
      <jvmarg value="-Ddidit.desc=Running your tests against our good and bad implementations"/>
      <formatter type="xml" usefile="true"/>
      <batchtest todir="${grader.dir}">
        <fileset dir="${grader.dir}/bin-impls-staff-final" includes="twitter/staff/*TestRunner.class"/>
      </batchtest>
      <classpath>
        <path refid="junit.jars"/>
        <pathelement location="${grader.dir}/bin-impls-staff-final"/>
        <pathelement location="${grader.dir}/bin-tests-student"/>
      </classpath>
      <assertions>
        <enable/>
      </assertions>
    </junit>
  </target>

  <!-- collect grading reports and zip up submission -->
	
  <target name="report">
    <junitreport tofile="${grader.report.file}">
      <fileset dir="${grader.dir}" includes="TEST-*.xml"/>
    </junitreport>

    <zip destfile="${zipfile}" fallbacktoUTF8="true">
        <fileset dir=".">
          <include name="**/*.java"/>
          <include name="**/*.class"/>
          <include name="**/*.xml"/>
        </fileset>
    </zip>
  </target>
	
  <!-- manage the grading folder -->

  <target name="clean">
    <delete dir="${grader.dir}"/>
    <delete file="${grader.report.file}"/>
  </target>
    
  <target name="unjar-beta">
    <unjar src="${beta.grader.jar}" dest="${grader.dir}" />
  </target>

  <target name="unjar-final" if="${final.grading}">
    <unjar src="${final.grader.jar}" dest="${grader.dir}" />
  </target>
	
  <!-- compile various combinations of student code and staff code -->

  <target name="compile"
          depends="unjar-beta, compile-empty, compile-student, compile-beta">
  </target>
    
  <target name="compile-empty">
  	
    <mkdir dir="${grader.dir}/bin-impls-empty"/>
    <javac srcdir="${grader.dir}/impls-empty" destdir="${grader.dir}/bin-impls-empty" debug="on">
      <include name="twitter/*.java"/>
    </javac>
    <mkdir dir="${grader.dir}/bin-tests-empty"/>
    <javac srcdir="${grader.dir}/tests-empty" destdir="${grader.dir}/bin-tests-empty" debug="on">
      <include name="twitter/*Test.java"/>
    </javac>
  </target>

  <target name="compile-student">
    <mkdir dir="${grader.dir}/bin-impls-student"/>
    <javac srcdir="src" destdir="${grader.dir}/bin-impls-student" debug="on">
      <include name="twitter/*.java"/>
      <exclude name="twitter/*Test.java"/>
    </javac>

    <mkdir dir="${grader.dir}/bin-tests-student"/>
    <javac srcdir="test" destdir="${grader.dir}/bin-tests-student" debug="on">
      <include name="twitter/ExtractTest.java"/>
      <include name="twitter/FilterTest.java"/>
      <include name="twitter/SocialNetworkTest.java"/>
      <classpath>
        <path refid="junit.jars"/>
        <pathelement location="${grader.dir}/bin-impls-empty"/>
      </classpath>
    </javac>
  </target>

  <target name="compile-beta">
    <mkdir dir="${grader.dir}/bin-impls-staff"/>
    <javac srcdir="${grader.dir}/tests-beta" destdir="${grader.dir}/bin-impls-staff" debug="on">
      <include name="twitter/staff/*TestRunner.java"/>
      <exclude name="twitter/staff/*Test.java"/>
      <classpath>
        <path refid="junit.jars"/>
        <pathelement location="${grader.dir}/bin-tests-student"/>
      </classpath>
    </javac>

    <mkdir dir="${grader.dir}/bin-tests-beta"/>
    <javac srcdir="${grader.dir}/tests-beta" destdir="${grader.dir}/bin-tests-beta" debug="on">
      <include name="twitter/staff/*Test.java"/>
      <classpath>
        <path refid="junit.jars"/>
        <pathelement location="${grader.dir}/bin-impls-empty"/>
      </classpath>
    </javac>

    <delete>
      <fileset dir="${grader.dir}/bin-impls-staff" includes="twitter/**/*Test.class"/>
      <fileset dir="${grader.dir}/bin-tests-beta" includes="twitter/*.class"/>
    </delete>
  </target>

  <target name="compile-final" depends="unjar-final" if="${final.grading}">
    <echo message="${final.grading}"/>
    <mkdir dir="${grader.dir}/bin-impls-staff-final"/>
    <javac srcdir="${grader.dir}/tests-final" destdir="${grader.dir}/bin-impls-staff-final" debug="on">
      <include name="twitter/*.java"/>
      <include name="twitter/staff/*TestRunner.java"/>
      <exclude name="twitter/staff/*Test.java"/>
      <classpath>
        <path refid="junit.jars"/>
        <pathelement location="${grader.dir}/bin-tests-empty"/>
      </classpath>
    </javac>

    <mkdir dir="${grader.dir}/bin-tests-final"/>
    <javac srcdir="${grader.dir}/tests-final" destdir="${grader.dir}/bin-tests-final" debug="on">
      <include name="twitter/staff/*Test.java"/>
      <classpath>
        <path refid="junit.jars"/>
        <pathelement location="${grader.dir}/bin-impls-empty"/>
      </classpath>
    </javac>

    <delete>
      <fileset dir="${grader.dir}/bin-impls-staff-final" includes="twitter/**/*Test.class"/>
      <fileset dir="${grader.dir}/bin-tests-final" includes="twitter/*.class"/>
    </delete>
  </target>
  
</project>
